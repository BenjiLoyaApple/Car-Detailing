//
//  UserProfileCache.swift
//  TaskManager
//
//  Created by Benji Loya on 21.05.2025.
//

/*
import SwiftUI
import Foundation
import CloudKit
import Combine

final class UserProfileCache: ObservableObject {
    static let shared = UserProfileCache()
    
    @Published private(set) var profiles: [String: UserModel] = [:]
    private var cancellables = Set<AnyCancellable>()
    
    private init() {}

    func loadProfile(for userID: String) {
        guard profiles[userID] == nil else { return }

        let recordID = CKRecord.ID(recordName: userID)
        
        CloudKitUtility
            .fetchRecord(by: recordID, recordType: "UserProfile", database: .private)
            .sink(receiveCompletion: { completion in
                if case let .failure(error) = completion {
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: \(error.localizedDescription)")
                }
            }, receiveValue: { [weak self] (profile: UserModel?) in
                guard let profile = profile else { return }
                DispatchQueue.main.async {
                    self?.profiles[userID] = profile
                }
            })
            .store(in: &cancellables)
    }

    func profile(for userID: String) -> UserModel? {
        return profiles[userID]
    }
    
    func insertMockProfile(_ profile: UserModel) {
           profiles[profile.record.recordID.recordName] = profile
       }
}



import Foundation
import Combine
import CloudKit
import SwiftUI

final class UserSession: ObservableObject {
    
    static let shared = UserSession()
    
    @Published var currentProfile: UserModel?

    @AppStorage("userProfileRecordID") private var savedRecordName: String?

    private var cancellables = Set<AnyCancellable>()

    private init() {}

    func loadProfileIfNeeded() {
        guard currentProfile == nil else { return }

        if let recordName = savedRecordName {
            let recordID = CKRecord.ID(recordName: recordName)
            CloudKitUtility
                .fetchRecord(by: recordID, recordType: "UserProfile", database: .private)
                .sink(receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É recordID: \(error.localizedDescription)")
                        self.loadWithPredicateFallback()
                    }
                }, receiveValue: { [weak self] (profile: UserModel?) in
                    if let profile = profile {
                        DispatchQueue.main.async {
                            self?.currentProfile = profile
                            print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ savedRecordID: \(profile.fullName)")
                        }
                    } else {
                        self?.loadWithPredicateFallback()
                    }
                })
                .store(in: &cancellables)
        } else {
            loadWithPredicateFallback()
        }
    }

    private func loadWithPredicateFallback() {
        CloudKitUtility
            .fetch(predicate: NSPredicate(value: true), recordType: "UserProfile", database: .private)
            .sink(receiveCompletion: { completion in
                if case .failure(let error) = completion {
                    print("‚ùå Failed to load current profile: \(error.localizedDescription)")
                }
            }, receiveValue: { [weak self] (profiles: [UserModel]) in
                if let profile = profiles.first {
                    DispatchQueue.main.async {
                        self?.currentProfile = profile
                        self?.savedRecordName = profile.record.recordID.recordName
                        print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω (–ø–æ –ø—Ä–µ–¥–∏–∫–∞—Ç—É) –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                    }
                } else {
                    print("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                }
            })
            .store(in: &cancellables)
    }

    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å
    func reloadProfile() {
        currentProfile = nil
        loadProfileIfNeeded()
    }

    /// –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ savedRecordID
    func clearSession() {
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        currentProfile = nil
        savedRecordName = nil
    }

    /// Combine Publisher –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    var profilePublisher: AnyPublisher<UserModel?, Never> {
        $currentProfile.eraseToAnyPublisher()
    }
    
    func deleteProfile(completion: @escaping (Result<Bool, Error>) -> Void) {
        guard let profile = currentProfile else {
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"])))
            return
        }

        CloudKitUtility
            .delete(item: profile, database: .private)
            .sink(receiveCompletion: { result in
                if case let .failure(error) = result {
                    completion(.failure(error))
                }
            }, receiveValue: { success in
                if success {
                    self.clearSession()
                    completion(.success(true))
                } else {
                    completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"])))
                }
            })
            .store(in: &cancellables)
    }
}


extension UserSession {
    func ensureProfileLoaded(completion: @escaping () -> Void) {
        if currentProfile != nil {
            completion()
        } else {
            profilePublisher
                .filter { $0 != nil }
                .first()
                .sink { _ in
                    completion()
                }
                .store(in: &cancellables)
        }
    }
}

*/
